name: Build and Publish PHP Extension

on: workflow_dispatch

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux x64 - PHP8.1 - NTS
          - build: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            php-versions: '8.1'
            phpts: 'nts'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust (MacOS and Linux)
        if: matrix.os != 'windows-2019'
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}
      
      - name: Install Rust (Windows)
        if: matrix.os == 'windows-2019'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
        env:
          phpts: ${{ matrix.phpts }}
      
      - name: Build Extension
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="libsql_php"
          str_version=${{ env.VERSION }}
          version=${str_version#turso-php-extension/}
          dirname="$binary_name-$version-php-${{ matrix.php-versions }}-${{ matrix.phpts }}-${{ matrix.build }}"

          mkdir -p "$dirname"

          # Check if we are on macOS
          if [[ "${{ matrix.os }}" == *"macos"* ]]; then
            if [[ -f "target/${{ matrix.target }}/release/lib${binary_name}.dylib" ]]; then
              cp "target/${{ matrix.target }}/release/lib${binary_name}.dylib" "target/${{ matrix.target }}/release/lib${binary_name}.so"
              mv "target/${{ matrix.target }}/release/lib${binary_name}.dylib" "$dirname"
              mv "target/${{ matrix.target }}/release/lib${binary_name}.so" "$dirname"
            else
              echo "Error: lib${binary_name}.dylib not found in target/${{ matrix.target }}/release/"
              exit 1
            fi
          elif [[ "${{ matrix.os }}" == "windows-2019" ]]; then
            if [[ -f "target/${{ matrix.target }}/release/${binary_name}.dll" ]]; then
              mv "target/${{ matrix.target }}/release/${binary_name}.dll" "$dirname"
            else
              echo "Error: ${binary_name}.dll not found in target/${{ matrix.target }}/release/"
              exit 1
            fi
          else
            if [[ -f "target/${{ matrix.target }}/release/lib${binary_name}.so" ]]; then
              mv "target/${{ matrix.target }}/release/lib${binary_name}.so" "$dirname"
            else
              echo "Error: lib${binary_name}.so not found in target/${{ matrix.target }}/release/"
              exit 1
            fi
          fi

          # Move stubs file if it exists
          if [[ -f "libsql_php_extension.stubs.php" ]]; then
            mv "libsql_php_extension.stubs.php" "$dirname"
          else
            echo "Warning: libsql_php_extension.stubs.php not found."
          fi

          # Archive the build
          if [[ "${{ matrix.os }}" == "windows-2019" ]]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi


      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
